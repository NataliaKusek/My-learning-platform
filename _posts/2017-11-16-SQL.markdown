
### SELECT 

_SELECT_ statement retrieves data from a single table.

```SELECT * FROM customer```

### ORDER BY

The _ORDER BY_ clause allows you to sort the rows returned from the SELECT statement in ascending or descending order based on the specified criteria.

```SELECT first_name, last_name FROM customer ORDER BY first_name ASC, last_name DESC```

### DISTINCT

If you specify multiple columns, the _DISTINCT_ clause will evaluate the duplicate based on the combination of values of these columns.

```SELECT DISTINCT bcolor FROM t1 ORDER BY bcolor```

PostgreSQL also provides the _DISTINCT ON_ (expression) to keep the “first” row of each group of duplicates.

```SELECT DISTINCT ON (bcolor) bcolor, fcolor FROM t1 ORDER BY bcolor, fcolor```

### WHERE

_WHERE_ are used to filter the rows returned from the SELECT statement.

Operator | Description
--- | --- 
= |	Equal
> |	Greater than
< |	Less than
>= | Greater than or equal
<= | Less than or equal
<> or != | Not equal
AND | Logical operator AND
OR	| Logical operator OR

```SELECT first_name, last_name from customer WHERE first_name = 'Mary' AND last_name = 'Smith'```

```SELECT payment_id, customer_id, amount WHERE amount >= 5 AND amount <= 50```

### LIMIT

PostgreSQL _LIMIT_ is an optional clause of the SELECT statement that gets a subset of rows returned by a query.

`SELECT film_id, title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 20 `

In case you want to skip a number of rows before returning the n rows, you use _OFFSET_ clause placed after the LIMIT clause as the following statement:

`SELECT film_id, title, rental_rate FROM film ORDER BY rental_rate DESC LIMIT 20 OFFSET 5`

### IN

You use the _IN_ operator in the WHERE clause to check if a value matches any value in a list of values. 

`SELECT payment_id, customer_id, payment_date FROM payment WHERE payment_id IN (1,2)` or
`SELECT payment_id, customer_id, payment_date FROM payment WHERE payment_id = 1 OR payment_id = 2`

### NOT IN 

`SELECT payment_id, customer_id, payment_date FROM payment WHERE payment_id NOT IN (1,2)` or
`SELECT payment_id, customer_id, payment_date FROM payment WHERE payment_id <> 1 OR payment_id <> 2`

The following query returns a list of customer id of customers that has rental’s return date on 2005-05-27:

`SELECT customer_id FROM rental WHERE CAST (return_date AS DATE) = '2005-05-27'`

You can use the list of customer ids as the input for the IN operator as follows:

`SELECT first_name, last_name FROM customer WHERE customer_id IN (SELECT customer_id FROM rental WHERE CAST (return_date AS DATE) = '2005-05-27')`

### BETWEEN

You use the _BETWEEN_ operator to match a value against a range of values.

`SELECT payment_id, customer_id, amount FROM payment WHERE amount BETWEEN 5 AND 10`

### LIKE/NOT LIKE

You construct a pattern by combining a string with wildcard characters and use the LIKE or NOT LIKE operator to find the matches. PostgreSQL provides two wildcard characters:

- Percent ( %)  for matching any sequence of characters.
- Underscore ( _)  for matching any single character.

`SELECT first_name FROM customer WHERE first_name LIKE 'Je%'`

`SELECT first_name FROM customer WHERE first_name NOT LIKE '_she%'`

PostgreSQL provides the ILIKE operator that acts like the LIKE operator. In addition, the _ILIKE_ operator matches value case-insensitively. See the following example:

`SELECT first_name FROM customer WHERE first_name ILIKE 'JEN%'`

PostgreSQL also provides some operators that act like the LIKE, NOT LIKE, ILIKE and NOT ILIKE operator as shown below:

- ~~ is equivalent to LIKE
- ~~* is equivalent to ILIKE
- !~~ is equivalent to NOT LIKE
- !~~* is equivalent to NOT ILIKE

### INNER JOIN

The _INNER JOIN_ clause returns rows in A table that have the corresponding rows in the B table.

o join A table to B table:

First, you specify the column in both tables from which you want to select data in the SELECT clause
Second, you specify the main table i.e.,  A in the FROM clause.
Third, you specify the table that the main table joins to i.e., B in the INNER JOIN clause. In addition, you put a join condition after the ON keyword i.e, A.pka = B.fka.

`SELECT customer.customer_id, first_name, last_name, email, amount, payment_date FROM customer INNER JOIN payment ON payment.customer_id  = customer.customer_id WHERE customer.customer_id = 2`

`SELECT customer.customer_id, first_name, last_name, email, amount, payment_date FROM customer INNER JOIN payment ON payment.customer_id  = customer.customer_id ORDER BY customer.customer_id`

To join the three tables, you place the second _INNER JOIN_ clause after the first _INNER JOIN_ clause as the following query:

`SELECT customer.customer_id, customer.first_name customer_first_name, customer.last_name customer_last_name, customer.email, staff.first_name staff_first_name, staff.last_name staff_last_name, amount, payment_date FROM customer INNER JOIN payment ON payment.customer_id = customer.customer_id INNER JOIN staff ON staff.staff_id = payment.staff_id`



